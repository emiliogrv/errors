{{if .WithGenHeader -}}
// Code generated by errors_generator; DO NOT EDIT.
// Generated at {{.Date}}
// Version {{.Version}}
//
{{end -}}
// Package {{.PackageName}} is a drop-in replacement for the standard library errors package,
// providing enhanced error handling with structured attributes, wrapping, joining,
// and seamless integration with logging frameworks like zap.
//
// This package extends the standard errors functionality while maintaining full
// compatibility with errors.New, errors.Is, errors.As, and errors.Join.
//
// Key features include:
//   - Structured attributes (Attr) for attaching typed metadata to errors
//   - Error wrapping with context preservation using Wrap and Wrapf
//   - Stack trace capture for debugging
//   - JSON serialization support for structured logging
//   - Direct integration with popular logging frameworks (zap, etc.)
//
// Basic usage:
//
//	err := {{.PackageName}}.New("something went wrong")
//	err = {{.PackageName}}.Wrap(err, "failed to process request",
//	    {{.PackageName}}.String("user_id", "123"),
//	    {{.PackageName}}.Int("retry_count", 3))
//
// The Attr system provides type-safe helpers for common types (String, Int, Bool,
// Time, Duration, etc.) enabling rich error context without losing type information.
package {{.PackageName}}

import (
	"time"
)

type (
	// Type is the type of Attr.
	Type uint8

	// Attr is a key-value pair with a type.
	Attr struct {
		Value any    `json:"value"`
		Key   string `json:"key"`
		Type  Type   `json:"type"`
	}
)

// Type constants define the type of Attr.
const (
	AnyType Type = iota
	ObjectType
	BoolType
	BoolsType
	TimeType
	TimesType
	DurationType
	DurationsType
	IntType
	IntsType
	Int64Type
	Int64sType
	Uint64Type
	Uint64sType
	Float64Type
	Float64sType
	StringType
	StringsType
)

// Any returns an Attr with the given key and value.
// Useful for logging any type of value or when the provided helper functions are not sufficient.
// The value can be of any type.
//
// The resulting Attr will have its Type field set to AnyType.
func Any(key string, value any) Attr {
	return Attr{Type: AnyType, Key: key, Value: value}
}

// Object returns an Attr with the given key and value.
// Useful for logging structs and other complex types.
// The value must be a slice of Attr.
//
// The resulting Attr will have its Type field set to ObjectType.
func Object(key string, value ...Attr) Attr {
	return Attr{Type: ObjectType, Key: key, Value: value}
}

// Bool returns an Attr with the given key and value.
// The value must be a boolean.
//
// The resulting Attr will have its Type field set to BoolType.
func Bool(key string, value bool) Attr {
	return Attr{Type: BoolType, Key: key, Value: value}
}

// Bools returns an Attr with the given key and value.
// The value must be a slice of boolean.
//
// The resulting Attr will have its Type field set to BoolsType.
func Bools(key string, value ...bool) Attr {
	return Attr{Type: BoolsType, Key: key, Value: value}
}

// Time returns an Attr with the given key and value.
// The value must be a time.Time.
//
// The resulting Attr will have its Type field set to TimeType.
//
// The time will be formatted according to the logger's set format setting.
func Time(key string, value time.Time) Attr {
	return Attr{Type: TimeType, Key: key, Value: value}
}

// Times returns an Attr with the given key and value.
// The value must be a slice of time.Time.
//
// The resulting Attr will have its Type field set to TimesType.
//
// The times will be formatted according to the logger's set format setting.
func Times(key string, value ...time.Time) Attr {
	return Attr{Type: TimesType, Key: key, Value: value}
}

// Duration returns an Attr with the given key and value.
// The value must be a time.Duration.
//
// The resulting Attr will have its Type field set to DurationType.
//
// The duration will be formatted according to the logger's set format setting.
func Duration(key string, value time.Duration) Attr {
	return Attr{Type: DurationType, Key: key, Value: value}
}

// Durations returns an Attr with the given key and value.
// The value must be a slice of time.Duration.
//
// The resulting Attr will have its Type field set to DurationsType.
//
// The durations will be formatted according to the logger's set format setting.
func Durations(key string, value ...time.Duration) Attr {
	return Attr{Type: DurationsType, Key: key, Value: value}
}

// Int returns an Attr with the given key and value.
// The value must be an int.
//
// The resulting Attr will have its Type field set to IntType.
func Int(key string, value int) Attr {
	return Attr{Type: IntType, Key: key, Value: value}
}

// Ints returns an Attr with the given key and value.
// The value must be a slice of int.
//
// The resulting Attr will have its Type field set to IntsType.
func Ints(key string, value ...int) Attr {
	return Attr{Type: IntsType, Key: key, Value: value}
}

// Int64 returns an Attr with the given key and value.
// The value must be an int64.
//
// The resulting Attr will have its Type field set to Int64Type.
func Int64(key string, value int64) Attr {
	return Attr{Type: Int64Type, Key: key, Value: value}
}

// Int64s returns an Attr with the given key and value.
// The value must be a slice of int64.
//
// The resulting Attr will have its Type field set to Int64sType.
func Int64s(key string, value ...int64) Attr {
	return Attr{Type: Int64sType, Key: key, Value: value}
}

// Uint64 returns an Attr with the given key and value.
// The value must be an uint64.
//
// The resulting Attr will have its Type field set to Uint64Type.
func Uint64(key string, value uint64) Attr {
	return Attr{Type: Uint64Type, Key: key, Value: value}
}

// Uint64s returns an Attr with the given key and value.
// The value must be a slice of uint64.
//
// The resulting Attr will have its Type field set to Uint64sType.
func Uint64s(key string, value ...uint64) Attr {
	return Attr{Type: Uint64sType, Key: key, Value: value}
}

// Float64 returns an Attr with the given key and value.
// The value must be a float64.
//
// The resulting Attr will have its Type field set to Float64Type.
func Float64(key string, value float64) Attr {
	return Attr{Type: Float64Type, Key: key, Value: value}
}

// Float64s returns an Attr with the given key and value.
// The value must be a slice of float64.
//
// The resulting Attr will have its Type field set to Float64sType.
func Float64s(key string, value ...float64) Attr {
	return Attr{Type: Float64sType, Key: key, Value: value}
}

// String returns an Attr with the given key and value.
// The value must be a string.
//
// The resulting Attr will have its Type field set to StringType.
func String(key, value string) Attr {
	return Attr{Type: StringType, Key: key, Value: value}
}

// Strings returns an Attr with the given key and value.
// The value must be a slice of string.
//
// The resulting Attr will have its Type field set to StringsType.
func Strings(key string, value ...string) Attr {
	return Attr{Type: StringsType, Key: key, Value: value}
}
